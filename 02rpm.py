#!/usr/bin/env python

import os, sys, tempfile, shutil, subprocess, tarfile, textwrap

from zeroinstall.injector.config import load_config
from zeroinstall.injector import gpg

config = load_config()
uri, = sys.argv[1:]
iface = config.iface_cache.get_interface(uri)
rpm_name = iface.get_name().lower().replace(' ', '-')

print iface.get_name()

desktop = """[Desktop Entry]
# This file was generated by 02rpm.
# See the Zero Install project for details: http://0install.net
Type=Application
Version=1.0
Name={name}
Comment={comment}
Exec={launch} -- {iface} %f
Categories=Application
""".format(name = iface.get_name(),
	   comment = iface.summary,
	   launch = '/usr/bin/0launch',
	   iface = uri)

sig, = config.iface_cache.get_cached_signatures(uri)[:1]
key = gpg.load_key(sig.fingerprint)

spec = """Summary: {summary}
Name: {rpm_name}-launcher
Version: 1
Release: 1
Group: Unknown
License: Unknown
Source: {rpm_name}.tar.gz
Prefix: /usr
BuildArch: noarch
Requires: zeroinstall-injector >= 0.30
Packager: {author}
%description
{description}

Note: This is a launcher package; the actual program will be run using
Zero Install.

%prep
%setup -c

%install
cp -pR * $RPM_BUILD_ROOT

%files
#/usr/bin/*
/usr/share/applications/*.desktop
""".format(rpm_name = rpm_name,
	   author = key.name,
	   summary = iface.summary,
	   description = iface.description)

d = tempfile.mkdtemp(prefix = '02rpm-')
try:
	bin_dir = d + '/usr/bin'
	apps_dir = d + '/usr/share/applications'
	os.makedirs(bin_dir)
	os.makedirs(apps_dir)

	s = open(apps_dir + '/' + rpm_name + '.desktop', 'w')
	s.write(desktop)
	s.close()

	s = open(d + '/' + rpm_name + '.spec', 'w')
	s.write(spec)
	s.close()

	t = tarfile.open(d + '/' + rpm_name + '.tar.gz', 'w:gz')
	t.add(d + '/usr', 'usr', recursive=True)
	t.close()

	p = subprocess.Popen(['rpm', '--eval', '%_sourcedir'], stdout=subprocess.PIPE)
	rpm_sources = p.communicate()[0].strip()
	subprocess.check_call(['cp', d + '/' + rpm_name + '.tar.gz', rpm_sources])

	subprocess.check_call(['rpmbuild', '-ba', d + '/' + rpm_name + '.spec'])
finally:
	shutil.rmtree(d)
